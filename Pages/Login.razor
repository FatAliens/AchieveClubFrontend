@page "/login"
@layout AuthLayout
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<header>
    <div id="title">
        <h1>Вход в аккаунт</h1>
        <select class="change-lang">
            <option value="ru">RU</option>
            <option value="en">EN</option>
            <option value="pl">PL</option>
        </select>
    </div>
    <div id="subtitle">
        <h3>
            <span>или</span>
            <a href="registration">зарегистрируйтесь</a>
        </h3>
    </div>
</header>
<main>
    <EditForm Model=@loginData OnValidSubmit="LoginAsync">
        <div id="login-form">
            <div class="field">
                <label for="email" class="input-label">E-mail</label>
                <input @bind-value="loginData.Email" class="custom-input" placeholder="email@mail.com"  type="text"/>
                <p class="error"><ValidationMessage For="() => loginData.Email" /></p>
            </div>
            <div class="field">
                <label class="input-label">Пароль</label>
                <input @bind-value="loginData.Password" class="custom-input" placeholder="•••••••••" type="password" />
                <p class="error"><ValidationMessage For="() => loginData.Password" /></p>
                <a href="#" class="input-help">Забыли пароль?</a>
            </div>
            <DataAnnotationsValidator />
            @if (loginResponse != null)
            {
                @if (!string.IsNullOrEmpty(loginResponse.Message))
                {
                    <p class="error-message">@loginResponse.Message</p>
                }
            }
            <input type="submit" disabled="@(!editContext.Validate())" id="login-button" value="Войти" />
        </div>
     </EditForm>
</main>

@code {
    private EditContext editContext;
    private LoginData loginData = new LoginData();
    private AuthService authService;
    private LoginResponse loginResponse;

    protected override void OnInitialized()
    {
        editContext = new EditContext(loginData);
        authService = new AuthService();
    }

    private async Task LoginAsync()
    {
        if (editContext.Validate())
        {
            loginResponse = await authService.LoginAsync(loginData);
            if (string.IsNullOrEmpty(loginResponse.Message))
            {
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userId", loginResponse.UserId.ToString());
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", loginResponse.AuthToken);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "refreshToken", loginResponse.RefreshToken);
                NavigationManager.NavigateTo("/profile");
            }
        }
    }
}


